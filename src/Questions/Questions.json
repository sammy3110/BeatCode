{
    "1": {
        "id": "1",
        "title": "Two Sum",
        "question": [
            "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
            "You may assume that each input would have exactly one solution, and you may not use the same element twice.",
            "You can return the answer in any order.",
            "Example 1:",
            "Input: nums = [2,7,11,15], target = 9",
            "Output: [0,1]",
            "Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
            "Example 2:",
            "Input: nums = [3,2,4], target = 6",
            "Output: [1,2]"
        ],
        "test_cases": [
            {
                "id": "1",
                "input": [
                    "3 4 5",
                    "2"
                ],
                "output": [
                    "2"
                ]
            },
            {
                "id": "2",
                "input": [
                    "1 2 3 4 5",
                    "4"
                ],
                "output": [
                    "3"
                ]
            }
        ],
        "metadata": {
            "difficulty": "Medium",
            "likes": "3598",
            "dislikes": "235"
        }
    },

    "2": {
        "id": "2",
        "title": "Valid Parentheses",
        "question": [
            "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
            "An input string is valid if:",
            "Open brackets must be closed by the same type of brackets.",
            "Open brackets must be closed in the correct order.",
            "Every close bracket has a corresponding open bracket of the same type.",
            "",
            "Example 1",
            "Input: s = \"()\"",
            "Output: true",
            "",
            "Example 2",
            "Input: s = \"()[]{}\"",
            "Output: true",
            "",
            "Example 3",
            "Input: s = \"(]\"",
            "Output: false"
        ],
        "test_cases": [
            {
                "id": "1",
                "input": [
                    "()"
                ],
                "output": [
                    "true"
                ]
            },
            {
                "id": "2",
                "input": [
                    "()[]{}"
                ],
                "output": [
                    "true"
                ]
            },
            {
                "id": "3",
                "input": [
                    "(]"
                ],
                "output": [
                    "false"
                ]
            }
        ],
        "metadata": {
            "difficulty": "Easy",
            "likes": "20.1K",
            "dislikes": "6.3k"
        }
    },

    "3": {
        "id": "3",
        "title": "Reverse Integer",
        "question": [
            "Given a signed 32-bit integer x, return x with its digits reversed.",
            "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1]",
            "then return 0.",
            "Assume the environment does not allow you to store 64-bit integers (signed or unsigned).",
            "Example 1:",
            "Input: x = 123",
            "Output: 321",
            "",
            "Example 2:",
            "Input: x = -123",
            "Output: -321",
            "",
            "Example 3:",
            "Input: x = 120",
            "Output: 21"
        ],
        "test_cases": [
            {
                "id": "1",
                "input": [
                    "123"
                ],
                "output": [
                    "321"
                ]
            },
            {
                "id": "2",
                "input": [
                    "-123"
                ],
                "output": [
                    "-321"
                ]
            },
            {
                "id": "3",
                "input": [
                    "120"
                ],
                "output": [
                    "21"
                ]
            }
        ],
        "metadata": {
            "difficulty": "Medium",
            "likes": "11.1K",
            "dislikes": "12.4K"
        }
    },

    "4": {
        "id": "4",
        "title": "Zigzag Conversion",
        "question": [
            "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)",
            "",
            "P   A   H   N",
            "A P L S I I G",
            "Y   I   R",
            "",
            "And then read line by line: \"PAHNAPLSIIGYIR\"",
            "Write the code that will take a string and make this conversion given a number of rows:",
            "string convert(string s, int numRows);",
            "",
            "Example 1:",
            "Input: s = \"PAYPALISHIRING\", numRows = 3",
            "Output: \"PAHNAPLSIIGYIR\"",
            "",
            "Example 2:",
            "Input: s = \"PAYPALISHIRING\", numRows = 4",
            "Output: \"PINALSIGYAHRPI\"",
            "Explanation:",
            "P     I    N",
            "A   L S  I G",
            "Y A   H R",
            "P     I",
            "",
            "Example 3:",
            "Input: s = \"A\", numRows = 1",
            "Output: \"A\"",
            "",
            "Constraints:",
            "1 <= s.length <= 1000",
            "s consists of English letters (lower-case and upper-case), ',' and '.'.",
            "1 <= numRows <= 1000"
        ],
        "test_cases": [
            {
                "id": "1",
                "input": [
                    "PAYPALISHIRING"
                ],
                "output": [
                    "3"
                ]
            },
            {
                "id": "2",
                "input": [
                    "PAYPALISHIRING"
                ],
                "output": [
                    "4"
                ]
            },
            {
                "id": "3",
                "input": [
                    "A"
                ],
                "output": [
                    "1"
                ]
            }
        ],
        "metadata": {
            "difficulty": "Medium",
            "likes": "6.4K",
            "dislikes": "12.7K"
        }
    }
}